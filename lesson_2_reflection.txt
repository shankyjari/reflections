What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, the git will create a .git folder inside a repository. This folder is where the git will keep all its tracking information. 
We need to initialize the rpeository so that it can be a part of the git andd the git can than able to track the fies. 


How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area, stages the files to include int he commit. It acts as an intermediate stage between the main working directory and the commit area. 
It gives  the user, a freedom to choose. If he wants to commit all the changes altogether or only some of the changes of the some of the files. 



How can you use the staging area to make sure you have one commit per logical
change?

Staging area will hsow you the files , efore it will go to the actual commits. This way, you can make sure that not more than one file is going into the commit. You can verify staging area files before doing actual commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

It is specifically helping, when the project may take different directions. Especially, if you want to dod anything experimental with your  project. In that case, you can put the branch to have some temporary changes. 



How do the diagrams help you visualize the branch structure?

Diagrams help us in finding the commit list, branch wise. Also, it will show the commit list timeline wise. And also bifurcate it in timewise as well.
It will be like a combined views. Two in one. Which will help us in debugging. 


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
